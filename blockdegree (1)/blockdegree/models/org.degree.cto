/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Model for digital certificates for educational accomplishments
 */

namespace org.degree

/*
import composer.blockcerts.Certificate
*/

abstract asset Certificate {
  o String typeC default='Assertion'
  o Badge badge
  o String context default='https://w3id.org/openbadges/v2,https://w3id.org/blockcerts/v2'
  o Boolean revoked default=false optional
} 
/*
include latter verification
o Verification verification optional
*/ 

concept Badge {
  o String id
  o String typen default='BadgeClass'
  o String name 
  o String description
  o String image optional
  o String criteria optional
  o Issuer issuer
}

concept Issuer {
  o String id
  o String typen default='Profile'
  o String name
  o String urln
  o String email
  o String description optional
  o String image optional
  o School school
  o SignatureLines signatureLines
}

concept SignatureLines {
  o String typen default='SignatureLine,Extension'
  o String name 
  o String image 
  o String jobtitle
}

concept School {
  o String id
  o String typen default='School,Extension'
  o String name
  o String urln
  o String email
  o String image 
}

participant Administrator identified by email {
  o String email
  o String firstName
  o String lastName
  o String publicKey
}

participant ExternalUser identified by email {
  o String email
  o String firstName
  o String lastName
  o String publicKey
}

asset CertificateTemplate identified by templateId extends Certificate {
  o String templateId
  --> Administrator globalAdministrator
}

asset PersonalCertificate identified by certId {
  o String certId
  --> Administrator localAdministrator
  --> CertificateTemplate templateId
  o Recipient recipient 
  o RecipientProfile recipientProfile
  o String hash
}

/*add person info as a string*/
transaction AddRoster {
  --> CertificateTemplate templateId
  --> Administrator localAdministrator
  o RecipientInfo[] recipientsInfo
}

transaction PersonalCertificateHistory {
  o String certId
}
  
event PersonalCertificateHistoryResults {
  o String[] results
}

transaction AdministratorHistory {
  o String email
}

event AdministratorHistoryResults {
  o String[] results
}

concept RecipientInfo {
  o String certId
  o Recipient recipient
  o RecipientProfile recipientProfile
}

concept Recipient {
  o Boolean hashed default = false
  o String email
}

concept RecipientProfile {
  o String typen default = 'RecipientProfile,Extension'
  o String name
  o String publicKey
}
